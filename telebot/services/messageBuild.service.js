import fetchService from "./fetch.service.js"
import dayjs from "dayjs"
import utc from 'dayjs/plugin/utc.js'
import timezone from 'dayjs/plugin/timezone.js'

dayjs.extend(utc)
dayjs.extend(timezone)

class MessageBuild {

    caseType(type) {
        switch(type) {
            case '–õ–µ–∫—Ü–∏—è':
                return('üî¥')
            case '–°–µ–º–∏–Ω–∞—Ä':
                return('üü¢')
            case '–ú–æ–¥—É–ª–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ':
                return('üü°')
            case '–í–Ω–µ—É—á–µ–±–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ':
                return('üîµ')
            case '–≠–∫–∑–∞–º–µ–Ω':
                return('üü£')
            case '–ó–∞—á—ë—Ç':
                return('üü£')
            case '–ü–µ—Ä–µ—Å–¥–∞—á–∞':
                return('üü£')
            case '–í–µ–±–∏–Ω–∞—Ä':
                return('üî¥')
        }
    }

    async build() {
        try {
            const shedule = await fetchService.getCurrentShedule()
                if (!shedule.count) {
                    return ([`
<strong>–£—Ä–∞!</strong>
–°–µ–≥–æ–¥–Ω—è —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –ø—É—Å—Ç ‚ú®
`])
                }
                const newShedule = await Promise.all(shedule.data.map(event => {
                    return this.mutateEvent(event)
                })).then(data => {
                    return data
                })
                return (
                    newShedule.map(event => (
`<i><b>${event.title}</b></i>
${this.caseType(event.type)} ${event.type}

–ì—Ä—É–ø–ø–∞: ${event.group ? event.group : '–ü–æ—Ç–æ–∫'}
–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${event.speaker}
–í—Ä–µ–º—è: ${dayjs.utc(event.datetime).tz('Europe/Moscow').format('DD.MM.YYYY HH:mm')}

${event.link ? `üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${event.link}` : "–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."}`
                    )).reverse()
                )
        } catch (e) {
            console.log(e)
            return e?.message
        }
    }

    async mutateEvent(event) {
        try {
            const group = await fetchService.getEventGroup(event.GroupId)
            const type = await fetchService.getEventType(event.TypeId)
            const speaker = await fetchService.getEventSpeaker(event.SpeakerId)
            return {
                ...event,
                group: group,
                type: type,
                speaker: speaker,
            }
        } catch (e) {
            console.log(e)
        }
    }

}

export default new MessageBuild()